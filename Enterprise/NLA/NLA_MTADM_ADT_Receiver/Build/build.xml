<project name="BrokerDeploy" default="init">
	<target name="base">
		<echo>Action selected for build: coming from jenkins as parameter: ${action}</echo>
		<echo>Action selected for environment: coming from jenkins as parameter: ${env}</echo>
		<echo>The userId : coming from jenkins as parameter: ${iib.userid}</echo>
		<!--<echo>The password :coming from jenkins as parameter: ${iib.userpassword}</echo>-->
		<echo>The Jenkins current directory where code has been fetched from repository: coming from jenkins as parameter: ${curDir}</echo>
		<echo>The Jenkins build number: coming from jenkins as parameter: ${jenkins_buildnumber}</echo>
		<echo>The jenkins job name: coming from jenkins as parameter: ${jenkins_jobname}</echo>		
		
		<!-- This jar is needed for switch statement, if statements and propertyregex expressions-->
		<taskdef resource="net/sf/antcontrib/antlib.xml">
			 <classpath>
				<pathelement location="/opt/apache-ant-1.10.1/ant-contrib-1.0b3.jar/ant-contrib-1.0b3.jar/ant-contrib-1.0b3.jar"/>
			</classpath>
		</taskdef>
		<switch value="${action}">
			<case value="Build">
				<antcall target="build"/>
				<antcall target="modifyBar"/>
			</case>
			
			<case value="Build+Deploy">
				<antcall target="build"/>
				<antcall target="modifyBar"/>
				<antcall target="deployBar"/>
			</case>
			<default>
				<echo message="Invalid action is selected"/>
			</default>
		</switch>
	</target>   
	
	<target name="init">

		<!-- Directory Initializations-->
		<!--<echo>Current Directory i.e. Jenkins directory coming as parameter </echo>-->
		
		<!--<property name="workspaceDir" location="${curDir}/../Projects"/>-->
		<!--setting this directory to absolute path as I am not fetching code from repository to Jenkins workspace. 
		The jenkins workspace directory would be present in ${curDir} which we are sending from Jenkins as parameter
		In normal scenarios, all further directories will be relative to  ${curDir}-->
		<property name="workspaceDir" location="/var/lib/jenkins/workspace/Enterprise/NLA/NLA_MTADM_ADT_Receiver_Build"/>
		<echo>Project Workspace Directory: ${workspaceDir}</echo>
		
		<property name="buildPropertiesDirectory" location="${workspaceDir}"/>
		<echo>buildPropertiesDirectory Directory: ${buildPropertiesDirectory}</echo>
		<echo>Project Workspace Directory: ${workspaceDir}</echo>
		
		<property name="barFileDir" location="${workspaceDir}/barfile"/>
		<echo>Bar(package) File Directory: ${barFileDir}</echo>
		
		<property name="barOverideFileDir" location="${workspaceDir}/baroverride"/>
		<echo>Bar override File Directory: ${barOverideFileDir}</echo>
		
		<property name="EnvPropertyFileDir" location="${workspaceDir}/EnvironmentProperties"/>
		<echo>Environment Property File Directory: ${EnvPropertyFileDir}</echo>
		
		<property name="ArtifactoryFileDir" location="${workspaceDir}/temp"/>

		<property file="${buildPropertiesDirectory}/build.properties"/>
	</target>

	<target name="build" depends="init">	

		<property file="${buildPropertiesDirectory}/build.properties"/>

		<echo message="Project to be Included List : ${Receiverproject.name}"/>
		<echo message="Message flows to be compiled List : ${Receivermessageflow.name}"/>
		
		<propertyregex property="ReceiverprojectIncluded" input="${Receiverproject.name}" regexp="," replace=" " global="true"/>
		<property name="ReceivermessageFlow" value="${Receivermessageflow.name}"/>
		
		<echo message="Project List String In Build Command : ${ReceiverprojectIncluded}"/>
		<echo message="Message flows String In Build Command : ${ReceivermessageFlow}"/>
		<echo message="The mqsicreatebar command is to be executed as follows"/>
		<echo message="${toolkit.home}/mqsicreatebar -data ${workspaceDir} -b ${barFileDir}/${jenkins_jobname}_ReceiverFlow_${jenkins_buildnumber}.bar -p ${ReceiverprojectIncluded} -o ${ReceivermessageFlow}"/>
		
		<exec executable="${toolkit.home}/mqsicreatebar" spawn="false" vmlauncher="false" failonerror="true">
			<arg value="-data" />
			<arg value="${workspaceDir}" />
			<arg value="-b" />
			<arg value="${barFileDir}/${jenkins_jobname}_ReceiverFlow_${jenkins_buildnumber}.bar" />
			<arg value="-p" />
			<arg line="${ReceiverprojectIncluded}" />			
			<arg value="-o" />
			<arg line="${ReceivermessageFlow}" />
		</exec>
		
		<echo message="The bar ${barFileDir}/${jenkins_jobname}_ReceiverFlow_${jenkins_buildnumber}.bar has been created successfully"/>	
		
	</target>

	<!--Target to build the broker archive using mqsiapplybaroverride. It will use BAR file created in Build step and would run override on it-->
	<target name="modifyBar" depends="init">
		<echo message="Applying override in Broker Archive file - ${jenkins_jobname}_ReceiverFlow_${jenkins_buildnumber}.bar using ${jenkins_jobname}.${env}.properties"/>
		<echo message="${toolkit.home}/mqsiapplybaroverride -b ${jenkins_jobname}_ReceiverFlow_${jenkins_buildnumber}.bar -o ${jenkins_jobname}_ReceiverFlow.${env}.bar"/>
		
		<!-- Execute the mqsibaroverride command but we need to set the environment first by running mqsiprofile command. We need to run mqsiprofile and mqsibarroveride in one single
		instance of exec command but which is technically not possible. We can not run them in 2 separate instance as each instance of exec in Ant removes the previous call to profile.
		The exec command exits its shell after run and mqsibaroverride gets erros saying that utilities not found
		The best way is to create your own batch file and send commands as parameters so that both mqsiprofile and mqsiapplybaroverride can run under same command console-->
		
		<exec executable="${toolkit.home}/mqsiapplybaroverride" failonerror="true" vmlauncher="false">
			<arg value="-b" />
			<arg value="${barFileDir}/${jenkins_jobname}_ReceiverFlow_${jenkins_buildnumber}.bar" />
			<arg value="-o" />
			<arg value="${barFileDir}/${jenkins_jobname}_ReceiverFlow.${env}.bar" />
			<arg value="-p" />
			<arg line="${EnvPropertyFileDir}/${jenkins_jobname}.${env}.properties" />
		</exec>
		
	</target>
	
	<!--create a folder on the environment server in opt/mqm/bar for create que and deploy to test  -->
	<target name="deployBar" depends="init">	
		<echo message="Deploy Broker Archive file - ${projectName}.bar "/>
		<!--<echo message="${mqsiDir}/mqsideploy ${brokerName} -e ${execution_group} -a /home/esbadm/staging/${projectName}/${buildDate}/${projectName}.${env}.bar"/> -->
		
		<!--Run the deployment on the server by getting the ${projectName}.${env}.bar from /home/esbadm/staging/${projectName}/${buildDate} directory -->
		<!-- For doing remote deployment, first we need to send that file to the broker runtime and then make the deployment. We need extra jar of jsch-0.1.42.jar as well to be placed in lib folder of ant-->
		<get src="http://iaasr001:8081/artifactory/Christus/${env}/NLA_MTADM_ADT_Receiver_Build_ReceiverFlow.${env}/${artifactnum}/NLA_MTADM_ADT_Receiver_Build_ReceiverFlow.${env}-${artifactnum}.bar" dest="/var/lib/jenkins/workspace/Enterprise/NLA/NLA_MTADM_ADT_Receiver_Build/temp"/>
		
        <!--Create a directory with thhe Transform flow name in opt/mqm/bar/--> 
		<scp file="${ArtifactoryFileDir}/NLA_MTADM_ADT_Receiver_Build_ReceiverFlow.${env}-${artifactnum}.bar" trust="true" todir="${iib.userid}:${iib.userpassword}@icisr031:/opt/mqm/bar/NLA_MTADM_ADT_Receiver"/>
		

		<sshexec trust="true" host="icisr031" username="${iib.userid}" password="${iib.userpassword}" command=". /opt/ibm/mqsi/9.0.0.1/bin/mqsiprofile;mqsideploy CHRISTUS_ENT_DEV_01 -e MidasHL7_TEST -a /opt/mqm/bar/NLA_MTADM_ADT_Receiver/NLA_MTADM_ADT_Receiver_Build_ReceiverFlow.${env}-${artifactnum}.bar -w 600" failonerror="true"/>
		<echo message="Completed deployment of Broker Archive file - NLA_MTADM_ADT_Receiver_Build_ReceiverFlow.${env}-${artifactnum}.bar"/>
		
	</target>

	</project>