BROKER SCHEMA ErrorHandling.Subflows


CREATE COMPUTE MODULE SenderErrorHandling_ProcessSystemError
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		DECLARE iMessageNumber INTEGER 0;
		DECLARE cMessageText CHARACTER ' ';
		DECLARE cNodeLabel CHARACTER '';
		CALL CommonHCP.Routines.ESQL.GetLastExceptionDetail(InputExceptionList, iMessageNumber, cMessageText, cNodeLabel);
		
		DECLARE exceptionTree CHARACTER;
		
		IF (CARDINALITY(InputExceptionList.[]) > 0) THEN
			CALL CommonHCP.Routines.ESQL.GetExceptionTreeAsString(InputExceptionList) INTO exceptionTree;
		ELSEIF (COALESCE(cMessageText, '') = '') THEN
			SET cMessageText = COALESCE(Environment.Variables.RollbackReason || '<BR>', '') || COALESCE('Connected to: ' || Environment.SentTo.host, '') || COALESCE(':' || CAST(Environment.SentTo.port as CHARACTER), '');
		END IF;		
		
		SET OutputRoot.XMLNSC.COMMON.ERROR.ERROR_TYPE = 'Sender_System';
		SET OutputRoot.XMLNSC.COMMON.ERROR.ERROR_STATUS = COALESCE(Environment.Variables.ErrorStatus, 'ERROR');
		SET OutputRoot.XMLNSC.COMMON.ERROR.MSG_ID = COALESCE(Environment.MsgID, InputRoot.MQRFH2.usr.uniqueMessageId);
		SET OutputRoot.XMLNSC.COMMON.ERROR.ERROR_NUMBER = COALESCE(iMessageNumber, 0);
		SET OutputRoot.XMLNSC.COMMON.ERROR.ERROR_MESSAGE = 'LOCAL_TRANSAQCTION_ID: ' || COALESCE(InputRoot.MQRFH2.usr.uniqueMessageId, 'Unknown') ||'<BR><BR>' || COALESCE(cMessageText, 'Outcome was ' || Environment.Outcome);		
		SET OutputRoot.XMLNSC.COMMON.ERROR.EXCEPTION_TREE = exceptionTree;
		SET OutputRoot.XMLNSC.COMMON.ERROR.BROKER_NAME = BrokerName;
		SET OutputRoot.XMLNSC.COMMON.ERROR.EXECUTION_GROUP_NAME = ExecutionGroupLabel;
		SET OutputRoot.XMLNSC.COMMON.ERROR.APPLICATION_NAME = ApplicationLabel;
		SET OutputRoot.XMLNSC.COMMON.ERROR.FLOW_NAME = MessageFlowLabel;
		SET OutputRoot.XMLNSC.COMMON.ERROR.NODE_LABEL = COALESCE(cNodeLabel,NodeLabel);
		SET OutputRoot.XMLNSC.COMMON.ERROR.CREATE_TIME = CAST(COALESCE(Environment.PatternVariables.HL7Input.Input.ConnectionDetails.OpenTimestamp, CURRENT_TIMESTAMP) AS CHARACTER FORMAT 'yyyy-MM-dd-HH.mm.ss.SSSSSS');
		SET OutputRoot.XMLNSC.COMMON.ERROR.UPDATE_TIME = CURRENT_TIMESTAMP;
		SET OutputRoot.XMLNSC.COMMON.ERROR.QUEUE_NAME = COALESCE(TRIM(InputRoot.MQMD.SourceQueue),'NA');
		SET OutputRoot.XMLNSC.COMMON.ERROR.QMGR_NAME  = COALESCE(TRIM(QueueManagerName),'NA');
		SET OutputRoot.XMLNSC.COMMON.ERROR.QUEUE_DISABLE = COALESCE(Environment.Variables.QueueDisable, 'NO');
		SET OutputRoot.XMLNSC.COMMON.ERROR.SEND_EMAIL= 'YES';
		IF(Environment.Outcome IS NOT NULL) THEN
			/*
			IF (CARDINALITY(InputRoot.DFDL[])> 0) THEN
				SET OutputRoot.XMLNSC.COMMON.ERROR.ORIGINAL_PAYLOAD	=  Environment.FailedMessage || CAST(x'0D0A0D0A' AS BLOB CCSID 1208) ||  ASBITSTREAM(InputRoot.DFDL);
			ELSE
				SET OutputRoot.XMLNSC.COMMON.ERROR.ORIGINAL_PAYLOAD	=  CAST('LOCAL_TRANSACTION_ID: ' || InputRoot.MQRFH2.usr.uniqueMessageId AS BLOB CCSID 1208) || CAST(x'0D0A0D0A' AS BLOB CCSID 1208) ||  InputRoot.BLOB.BLOB;
			END IF;
			*/
			DECLARE cQMgrName CHARACTER TRIM(QueueManagerName);
			DECLARE cQName CHARACTER TRIM(InputRoot.MQMD.SourceQueue);
			CALL CommonHCP.Routines.ESQL.DisableQueue(cQMgrName, cQName) INTO Environment.Variables.QueueDisable;
			IF STARTSWITH(TRIM(Environment.Variables.QueueDisable), 'SUCCESS:') THEN
				SET Environment.Variables.Throw = 'YES';
			ELSE
				-- Try Queue Inihibit 1 more time after 30 seconds
				IF SLEEP(30000) THEN
					CALL CommonHCP.Routines.ESQL.DisableQueue(cQMgrName, cQName) INTO Environment.Variables.QueueDisable;
					IF STARTSWITH(TRIM(Environment.Variables.QueueDisable), 'SUCCESS:') THEN
						SET Environment.Variables.Throw = 'YES';
					END IF;
				END IF;
			END IF;
		ELSE
			SET OutputRoot.XMLNSC.COMMON.ERROR.ORIGINAL_PAYLOAD =InputRoot.BLOB.BLOB;
			SET Environment.Variables = NULL;
		END IF;
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;
