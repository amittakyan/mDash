BROKER SCHEMA ErrorHandling.Subflows


CREATE COMPUTE MODULE SenderErrorHandling_ProcessLog
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		--CALL CopyEntireMessage();
		CALL CopyMessageHeaders();
		SET OutputLocalEnvironment = InputLocalEnvironment;		
		
		DECLARE iMessageNumber INTEGER 0;
		DECLARE cMessageText CHARACTER ' ';
		DECLARE cNodeLabel CHARACTER '';
		-- CALL CommonHCP.Routines.ESQL.GetLastExceptionDetail(InputExceptionList, iMessageNumber, cMessageText, cNodeLabel);
		CALL CommonHCP.Routines.ESQL.GetLastExceptionExpandedDetail(InputExceptionList, iMessageNumber, cMessageText, cNodeLabel);
		
		DECLARE exceptionTree CHARACTER;
		
		CALL CommonHCP.Routines.ESQL.GetExceptionTreeAsString(InputExceptionList) INTO exceptionTree;
		
		
		SET OutputRoot.XMLNSC.COMMON.ERROR.ERROR_TYPE = 'Sender_Log';
		SET OutputRoot.XMLNSC.COMMON.ERROR.ERROR_STATUS = Environment.Variables.ErrorStatus;
		SET OutputRoot.XMLNSC.COMMON.ERROR.ERROR_NUMBER = iMessageNumber;
		SET OutputRoot.XMLNSC.COMMON.ERROR.ERROR_MESSAGE = cMessageText;		
		SET OutputRoot.XMLNSC.COMMON.ERROR.EXCEPTION_TREE = exceptionTree;
		SET OutputRoot.XMLNSC.COMMON.ERROR.ORIGINAL_PAYLOAD =InputRoot.BLOB.BLOB;
		SET OutputRoot.XMLNSC.COMMON.ERROR.BROKER_NAME = BrokerName;
		SET OutputRoot.XMLNSC.COMMON.ERROR.EXECUTION_GROUP_NAME = ExecutionGroupLabel;
		SET OutputRoot.XMLNSC.COMMON.ERROR.APPLICATION_NAME = ApplicationLabel;
		SET OutputRoot.XMLNSC.COMMON.ERROR.FLOW_NAME = MessageFlowLabel;
		SET OutputRoot.XMLNSC.COMMON.ERROR.NODE_LABEL = COALESCE(cNodeLabel,NodeLabel);
		SET OutputRoot.XMLNSC.COMMON.ERROR.CREATE_TIME = Environment.Variable.StartTime;
		SET OutputRoot.XMLNSC.COMMON.ERROR.UPDATE_TIME = CURRENT_TIMESTAMP;
		SET OutputRoot.XMLNSC.COMMON.ERROR.PAYLOAD = InputRoot.BLOB.BLOB;
		SET OutputRoot.XMLNSC.COMMON.ERROR.QUEUE_NAME = COALESCE(TRIM(InputRoot.MQMD.SourceQueue),'NA');
		SET OutputRoot.XMLNSC.COMMON.ERROR.QMGR_NAME  = COALESCE(TRIM(InputRoot.MQMD.ReplyToQMgr),'NA');
		SET OutputRoot.XMLNSC.COMMON.ERROR.QUEUE_DISABLE = COALESCE(Environment.Variables.QueueDisable, 'NO');
		SET OutputRoot.XMLNSC.COMMON.ERROR.SEND_EMAIL= 'NO';
		SET OutputRoot.XMLNSC.COMMON.ERROR.MSG_ID = COALESCE(Environment.MsgID, InputRoot.MQRFH2.usr.uniqueMessageId);
		
		
		
		-- In case of ACK TIMEOUT we get the Connection information in LocalEnvironment variables
		IF InputLocalEnvironment.WrittenDestination.TCPIP.Output.ConnectionDetails.Hostname IS NOT NULL THEN
			SET Environment.Variables.TCP.HOST = InputLocalEnvironment.WrittenDestination.TCPIP.Output.ConnectionDetails.Hostname;
			SET Environment.Variables.TCP.PORT = InputLocalEnvironment.WrittenDestination.TCPIP.Output.ConnectionDetails.Port;
		ELSE
			
			DECLARE start REFERENCE TO InputExceptionList.*[1];
			WHILE start.Number IS NOT NULL DO 
	
		       IF Environment.Variables.TCP.HOST IS NULL OR Environment.Variables.TCP.PORT IS NULL THEN
			       SET Environment.Variables.TCP.HOST = start.Insert[1].Text;
			       SET Environment.Variables.TCP.PORT = start.Insert[2].Text;
		       END IF;
				-- Move start to the last child of the field to which it currently points
			   MOVE start LASTCHILD;
			END WHILE;
		END IF;
		RETURN TRUE;
		
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;
