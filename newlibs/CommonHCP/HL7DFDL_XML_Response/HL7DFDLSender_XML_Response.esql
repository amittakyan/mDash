BROKER SCHEMA HL7DFDL_XML_Response

DECLARE Retries EXTERNAL INTEGER 5;
DECLARE Delay EXTERNAL INTEGER 10;

CREATE COMPUTE MODULE HL7DFDLSender
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- CALL CopyMessageHeaders();
		-- CALL CopyEntireMessage();
		
		SET Environment.MsgID = InputRoot.MQRFH2.usr.uniqueMessageId;
		
                
		DECLARE LeadingMLLPBytes BLOB X'0B';
		DECLARE TrailingMLLPBytes BLOB X'1C0D';
		
		DECLARE Try INTEGER 0;
		
        DECLARE hl7Msg BLOB LeadingMLLPBytes||InputRoot.BLOB.BLOB||TrailingMLLPBytes;
        
        DECLARE Success BOOLEAN FALSE;
        WHILE(Try < Retries AND NOT Success) DO
        	SET Success = TRUE;
        	BEGIN
	        	DECLARE CONTINUE HANDLER FOR SQLSTATE LIKE '%'
				BEGIN
					SET Success = FALSE;
					SET Try = Try + 1;
		        	IF(Try < Retries AND NOT SLEEP(Delay*1000)) THEN
						SET Try = Retries + 1;
					END IF;
				END;
				SET OutputRoot.BLOB.BLOB = hl7Msg;
				PROPAGATE TO TERMINAL 'out';
				IF (Success AND Environment.Outcome = 'NACK' AND Try < Retries-1) THEN
					DECLARE s BOOLEAN SLEEP(Delay*1000);
					SET Success = FALSE;
					SET Try = Try + 1;
	        	END IF;
        	END;
		END WHILE;
        
        IF (Success AND Environment.Outcome = 'ACK') THEN
        	CALL CopyMessageHeaders();
        	SET OutputRoot.MQRFH2.usr.uniqueMessageId = Environment.MsgID;
			SET OutputRoot.BLOB.BLOB = Environment.ReplyBLOB;
			PROPAGATE TO TERMINAL 'out2';
        ELSEIF(Success AND Environment.Outcome = 'NACK') THEN
        	CALL CopyMessageHeaders();
        	SET OutputRoot.MQRFH2.usr.uniqueMessageId = Environment.MsgID;
			SET OutputRoot.BLOB.BLOB = Environment.ReplyBLOB;
			SET Environment.FailedMessage = InputRoot.BLOB.BLOB;
			PROPAGATE TO TERMINAL 'out1';
        ELSEIF(Success) THEN
        	CALL CopyMessageHeaders();
        	SET OutputRoot.MQRFH2.usr.uniqueMessageId = Environment.MsgID;
			SET OutputRoot.BLOB.BLOB = Environment.ReplyBLOB;
			PROPAGATE TO TERMINAL 'out3';
		ELSE
			CALL CopyEntireMessage(); 
			SET OutputExceptionList = Environment.Exception;
			SET Environment.Variables.QueueDisable = TRUE;
			PROPAGATE TO TERMINAL 'out3';
		END IF;
        
		RETURN FALSE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;


CREATE COMPUTE MODULE HL7DFDLSender_HandleReply
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL CopyMessageHeaders();
		-- CALL CopyEntireMessage();
		SET OutputRoot.BLOB.BLOB = SUBSTRING(InputRoot.BLOB.BLOB FROM 2 FOR LENGTH(InputRoot.BLOB.BLOB) - 2);
		
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;


CREATE COMPUTE MODULE HL7DFDLSender_HandleException
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- CALL CopyMessageHeaders();
		-- CALL CopyEntireMessage();
		
		DECLARE iMessageNumber INTEGER 0;
		DECLARE cMessageText CHARACTER ' ';
		DECLARE cNodeLabel CHARACTER '';
		CALL CommonHCP.Routines.ESQL.GetLastExceptionDetail(InputExceptionList, iMessageNumber, cMessageText, cNodeLabel);
		SET Environment.Variables.FailureReason = cMessageText;
		SET Environment.Exception = InputExceptionList;
		--PROPAGATE TO TERMINAL 'out' EXCEPTION InputExceptionList;
		THROW USER EXCEPTION;
	END;
END MODULE;


CREATE COMPUTE MODULE HL7DFDLSender_PrepForReply
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- CALL CopyMessageHeaders();
		-- CALL CopyEntireMessage();
		SET OutputLocalEnvironment.TCPIP.Receive.Hostname = InputLocalEnvironment.WrittenDestination.TCPIP.Output.ConnectionDetails.Hostname;
		SET OutputLocalEnvironment.TCPIP.Receive.Port = InputLocalEnvironment.WrittenDestination.TCPIP.Output.ConnectionDetails.Port;
		
		RETURN TRUE;
	END;

END MODULE;


CREATE COMPUTE MODULE HL7DFDLSender_Handle_ACK_NACK
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		--CALL CopyMessageHeaders();
		CALL CopyEntireMessage();
		
		DECLARE leadChar CHARACTER;
		DECLARE trailChar CHARACTER;
		
		SET leadChar = CAST(X'0B' AS CHARACTER CCSID 1208);
		SET trailChar = CAST(X'1C0D' AS CHARACTER CCSID 1208);
		
		
		
		DECLARE AA BLOB;
		DECLARE MSA BLOB;
		
		SET AA = CAST('<MSA.1>AA</MSA.1>' AS BLOB CCSID 1208);
		SET MSA = CAST('<MSA.3>' AS BLOB CCSID 1208);
		
		SET Environment.ReplyBLOB = InputRoot.BLOB.BLOB;
		
		IF (CONTAINS(InputRoot.BLOB.BLOB, AA))THEN
			PROPAGATE TO TERMINAL 'out'; --Successfully sent, and accepted
			SET Environment.Outcome = 'ACK';
		ELSEIF (CONTAINS(InputRoot.BLOB.BLOB, MSA)) THEN
			PROPAGATE TO TERMINAL 'out1'; -- Successfully sent, BUT returned rejected
			SET Environment.Outcome = 'NACK';
		ELSE
			PROPAGATE TO TERMINAL 'out2'; --No MSA was returned, which is an invalid response, so send to Failure output
			SET Environment.Outcome = 'Missing MSA';
		END IF;
		/*
		SET Environment.DFDL = InputRoot.DFDL;
		
		IF(InputRoot.DFDL.HL7:HL7.HL7:anyHL7Segment[1].HL7:MSA.HL7:"MSA.1.AcknowledgementCode" IS NULL) THEN
			PROPAGATE TO TERMINAL 'out2'; --No MSA was returned, which is an invalid response, so send to Failure output
			SET Environment.Outcome = 'Missing MSA';
		ELSEIF(InputRoot.DFDL.HL7:HL7.HL7:anyHL7Segment[1].HL7:MSA.HL7:"MSA.1.AcknowledgementCode" = 'AA') THEN
			PROPAGATE TO TERMINAL 'out'; --Successfully sent, and accepted
			SET Environment.Outcome = 'ACK';
		ELSE
			PROPAGATE TO TERMINAL 'out1'; -- Successfully sent, BUT returned rejected
			SET Environment.Outcome = 'NACK';
		END IF;
		*/
		RETURN FALSE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;

