

BROKER SCHEMA ErrorHandling.Subflows


CREATE COMPUTE MODULE CommonErrorHandlingFlow_ProcessError
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN

		
		IF (Environment.Variables.ErrorReported IS NULL) THEN
			
			DECLARE iMessageNumber INTEGER 0;
			DECLARE cMessageText CHARACTER ' ';
			DECLARE cNodeLabel CHARACTER '';
			CALL Common.Routines.ESQL.GetLastExceptionDetail(InputExceptionList, iMessageNumber, cMessageText, cNodeLabel);
			
			
			DECLARE exceptionTree CHARACTER;
			
			CALL Common.Routines.ESQL.GetExceptionTreeAsString(InputExceptionList) INTO exceptionTree;
			
			SET OutputRoot.XMLNSC.COMMON.ERROR.ERROR_TYPE = 'COMMON';
			SET OutputRoot.XMLNSC.COMMON.ERROR.ERROR_STATUS = COALESCE(Environment.Variables.ErrorStatus, 'ERROR');
			SET OutputRoot.XMLNSC.COMMON.ERROR.ERROR_NUMBER = iMessageNumber;
			SET OutputRoot.XMLNSC.COMMON.ERROR.ERROR_MESSAGE = cMessageText;
			SET OutputRoot.XMLNSC.COMMON.ERROR.EXCEPTION_TREE = exceptionTree;
			SET OutputRoot.XMLNSC.COMMON.ERROR.ORIGINAL_PAYLOAD =InputRoot.BLOB.BLOB;
			SET OutputRoot.XMLNSC.COMMON.ERROR.BROKER_NAME = BrokerName;
			SET OutputRoot.XMLNSC.COMMON.ERROR.EXECUTION_GROUP_NAME = ExecutionGroupLabel;
			SET OutputRoot.XMLNSC.COMMON.ERROR.APPLICATION_NAME = ApplicationLabel;
			SET OutputRoot.XMLNSC.COMMON.ERROR.FLOW_NAME = MessageFlowLabel;
			SET OutputRoot.XMLNSC.COMMON.ERROR.NODE_LABEL = COALESCE(cNodeLabel, NodeLabel);
			SET OutputRoot.XMLNSC.COMMON.ERROR.CREATE_TIME = CAST(COALESCE(Environment.Variable.StartTime, CURRENT_TIMESTAMP) AS CHARACTER FORMAT 'yyyy-MM-dd-HH.mm.ss.SSSSSS');
			SET OutputRoot.XMLNSC.COMMON.ERROR.UPDATE_TIME = CAST(CURRENT_TIMESTAMP AS CHARACTER FORMAT 'yyyy-MM-dd-HH.mm.ss.SSSSSS');
			SET OutputRoot.XMLNSC.COMMON.ERROR.QUEUE_NAME = COALESCE(TRIM(InputRoot.MQMD.SourceQueue),'NA');
			SET OutputRoot.XMLNSC.COMMON.ERROR.QMGR_NAME  = COALESCE(TRIM(InputRoot.MQMD.ReplyToQMgr),'NA');
			SET OutputRoot.XMLNSC.COMMON.ERROR.QUEUE_DISABLE = COALESCE(Environment.Variables.QueueDisable, 'NO');
			SET OutputRoot.XMLNSC.COMMON.ERROR.SEND_EMAIL= 'YES';
			
			--SET Environment.Variables = NULL;
		
		
			PROPAGATE TO TERMINAL 'out';
		END IF;
		
		SET Environment.Variables.ErrorReported = 'Y';
		
		PROPAGATE TO TERMINAL 'out1';		
		 
		RETURN FALSE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;